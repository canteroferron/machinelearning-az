pint("aaaa")
pritn("aaa")
print("aaa")
setwd("D:/Recursos/Cursos/Udemy-MachineLearningAZ/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
dataset$State =
factor(
dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
trainingSet = subset(dataset, split == TRUE)
testingSet = subset(dataset, split == FALSE)
View(trainingSet)
?lm
dataset = read.csv('50_Startups.csv')
dataset$State =
factor(
dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
# Dividir los datos en conjunto de entrenamiento y test
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
trainingSet = subset(dataset, split == TRUE)
testingSet = subset(dataset, split == FALSE)
# Alinear el modelo de Ragresion Linal Multiple con el conjunto de Entrenamiento
# Crea el modelos lineal como variable dependiente y el punto son todas las demas independientes
regression = lm(formula = Profit ~ ., data = trainingSet)
View(regression)
View(regression)
sumary(regression)
summary(regression)
yPred = predict(regression, newdata = testingSet)
ypred
yPred
View(testingSet)
regression =
lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regression)
regression =
lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression)
regression =
lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regression)
regression =
lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression
)
regression =
lm(
formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regression)
regression =
lm(
formula = Profit ~ R.D.Spend,
data = dataset)
summary(regression)
yPred = predict(regression, newdata = testingSet$R.D.Spend)
?predict
yPred = predict(regression, newdata = c(1, testingSet$R.D.Spend))
yPred = predict(regression, newdata = c(1, 25000))
yPred = predict(regression, newdata = [1, 25000])
#Importar el data set
dataset = read.csv('50_Startups.csv')
# Regresion lineal multiple automatica
#Importar el data set
dataset = read.csv('50_Startups.csv')
dataset$State =
factor(
dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
# Dividir los datos en conjunto de entrenamiento y test
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
trainingSet = subset(dataset, split == TRUE)
testingSet = subset(dataset, split == FALSE)
# Alinear el modelo de Ragresion Linal Multiple con el conjunto de Entrenamiento
# Crea el modelos lineal como variable dependiente y el punto son todas las demas independientes
regression = lm(formula = Profit ~ ., data = trainingSet)
# Predecir los resultados con el conjunto de testing
yPred = predict(regression, newdata = testingSet)
dataset = read.csv('50_Startups.csv')
dataset$State =
factor(
dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
# Dividir los datos en conjunto de entrenamiento y test
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
trainingSet = subset(dataset, split == TRUE)
testingSet = subset(dataset, split == FALSE)
# Alinear el modelo de Ragresion Linal Multiple con el conjunto de Entrenamiento
# Crea el modelos lineal como variable dependiente y el punto son todas las demas independientes
regression = lm(formula = Profit ~ ., data = trainingSet)
# Predecir los resultados con el conjunto de testing
yPred = predict(regression, newdata = testingSet)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)) {
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
sl = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, sl)
View(testingSet)
# Regresion lineal multiple
#Importar el data set
dataset = read.csv('50_Startups.csv')
dataset$State =
factor(
dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
# Dividir los datos en conjunto de entrenamiento y test
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
trainingSet = subset(dataset, split == TRUE)
testingSet = subset(dataset, split == FALSE)
# Alinear el modelo de Ragresion Linal Multiple con el conjunto de Entrenamiento
# Crea el modelos lineal como variable dependiente y el punto son todas las demas independientes
regression = lm(formula = Profit ~ ., data = trainingSet)
# Predecir los resultados con el conjunto de testing
yPred = predict(regression, newdata = testingSet)
# Construir un modelo optimo con la eliminacion hacia atras, con todo el conjunto de datos
regression =
lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regression)
regression =
lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression)
regression =
lm(
formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regression)
regression =
lm(
formula = Profit ~ R.D.Spend,
data = dataset)
summary(regression)
yPred = predict(regression, newdata = testingSet[, c(1)])

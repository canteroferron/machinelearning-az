pint("aaaa")
pritn("aaa")
print("aaa")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Coficicar la variable de clasificacion como factor
#dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Dividir el conjunto entre training y testing
library(caTools)
set.seed(123)
spit = sample.split(dataset$Purchased, SplitRatio = 0.75)
trainingSet = subset(dataset, spit == TRUE)
testingSet = subset(dataset, spit == FALSE)
setwd("D:/Recursos/Cursos/Udemy-MachineLearningAZ/machinelearning-az/datasets/Part 3 - Classification/Section 19 - Decision Tree Classification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Coficicar la variable de clasificacion como factor
#dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Dividir el conjunto entre training y testing
library(caTools)
set.seed(123)
spit = sample.split(dataset$Purchased, SplitRatio = 0.75)
trainingSet = subset(dataset, spit == TRUE)
testingSet = subset(dataset, spit == FALSE)
library(rpart)
classfier = rpart(formula = Purchased ~ ., data = trainingSet)
yPred = predict(classifier, type = "response", newdata = testingSet[, -3])
# Matrix de confución
cm = table(testingSet[, 3], yPred)
classifier = rpart(formula = Purchased ~ ., data = trainingSet)
yPred = predict(classifier, type = "response", newdata = testingSet[, -3])
# Matrix de confución
cm = table(testingSet[, 3], yPred)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Coficicar la variable de clasificacion como factor
#dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Dividir el conjunto entre training y testing
library(caTools)
set.seed(123)
spit = sample.split(dataset$Purchased, SplitRatio = 0.75)
trainingSet = subset(dataset, spit == TRUE)
testingSet = subset(dataset, spit == FALSE)
# Ajudtar el modelo de regresion logistica con el conjunto de entrenamiento
library(rpart)
classifier = rpart(formula = Purchased ~ ., data = trainingSet)
# Predicion de los resultado con el conjunto de testing
# Probabilidad de prediccion
yPred = predict(classifier, type = "response", newdata = testingSet[, -3])
# Matrix de confución
cm = table(testingSet[, 3], yPred)
yPred = predict(classifier, type = "response", newdata = testingSet[, -3])
yPred = predict(classifier, type = "response", newdata = testingSet[, -3])
yPred = predict(classifier, newdata = testingSet[, -3])
yPred
cm = table(testingSet[, 3], yPred)
cm
yPred = predict(classifier, newdata = testingSet[, -3], type = "class")
yPred = predict(classifier, newdata = testingSet[,-3], type = "class")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Coficicar la variable de clasificacion como factor
#dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Dividir el conjunto entre training y testing
library(caTools)
set.seed(123)
spit = sample.split(dataset$Purchased, SplitRatio = 0.75)
trainingSet = subset(dataset, spit == TRUE)
testingSet = subset(dataset, spit == FALSE)
# Ajudtar el modelo de regresion logistica con el conjunto de entrenamiento
library(rpart)
classifier = rpart(formula = Purchased ~ ., data = trainingSet)
# Predicion de los resultado con el conjunto de testing
# Probabilidad de prediccion
yPred = predict(classifier, newdata = testingSet[,-3], type = "class")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Coficicar la variable de clasificacion como factor
#dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Dividir el conjunto entre training y testing
library(caTools)
set.seed(123)
spit = sample.split(dataset$Purchased, SplitRatio = 0.75)
trainingSet = subset(dataset, spit == TRUE)
testingSet = subset(dataset, spit == FALSE)
# Ajudtar el modelo de regresion logistica con el conjunto de entrenamiento
library(rpart)
classifier = rpart(formula = Purchased ~ .,  data = trainingSet)
yPred = predict(classifier, newdata = testingSet[,-3], type = "class")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Coficicar la variable de clasificacion como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Dividir el conjunto entre training y testing
library(caTools)
set.seed(123)
spit = sample.split(dataset$Purchased, SplitRatio = 0.75)
trainingSet = subset(dataset, spit == TRUE)
testingSet = subset(dataset, spit == FALSE)
# Ajudtar el modelo de regresion logistica con el conjunto de entrenamiento
library(rpart)
classifier = rpart(formula = Purchased ~ .,  data = trainingSet)
# Predicion de los resultado con el conjunto de testing
# Probabilidad de prediccion
yPred = predict(classifier, newdata = testingSet[,-3], type = "class")
# Matrix de confución
cm = table(testingSet[, 3], yPred)
?cm
cm
library(ElemStatLearn)
set = trainingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet)
plot(set[, -3],
main = 'Arbol de desición (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = trainingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet, type = "class")
plot(set[, -3],
main = 'Arbol de desición (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = trainingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet, type = "class")
plot(set[, -3],
main = 'Arbol de desición (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = testingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet, type = "class")
plot(set[, -3],
main = 'Arbol de desición (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# ClasificaciÃ³n con Ãrboles de DecisiÃ³n
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificaciÃ³n como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("rpart")
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3],
type = "class")
# Crear la matriz de confusiÃ³n
cm = table(testing_set[, 3], y_pred)
# VisualizaciÃ³n del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 250)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = "class")
plot(set[, -3],
main = 'Ãrbol de DecisiÃ³n (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# VisualizaciÃ³n del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 250)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = "class")
plot(set[, -3],
# Arboles de clasificiones
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Coficicar la variable de clasificacion como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Dividir el conjunto entre training y testing
library(caTools)
set.seed(123)
spit = sample.split(dataset$Purchased, SplitRatio = 0.75)
trainingSet = subset(dataset, spit == TRUE)
testingSet = subset(dataset, spit == FALSE)
# Ajudtar el modelo de regresion logistica con el conjunto de entrenamiento
library(rpart)
classifier = rpart(formula = Purchased ~ .,  data = trainingSet)
# Predicion de los resultado con el conjunto de testing
# Probabilidad de prediccion
yPred = predict(classifier, newdata = testingSet[,-3], type = "class")
# Matrix de confución
cm = table(testingSet[, 3], yPred)
# Visuliazacion del conjunto de entranmiento
library(ElemStatLearn)
set = trainingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet, type = "class")
plot(set[, -3],
main = 'Arbol de desición (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = testingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet, type = "class")
plot(set[, -3],
main = 'Arbol de desición (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
plot(classifier)
text(classifier)
setwd("D:/Recursos/Cursos/Udemy-MachineLearningAZ/machinelearning-az/datasets/Part 3 - Classification/Section 20 - Random Forest Classification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Coficicar la variable de clasificacion como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Dividir el conjunto entre training y testing
library(caTools)
set.seed(123)
spit = sample.split(dataset$Purchased, SplitRatio = 0.75)
trainingSet = subset(dataset, spit == TRUE)
testingSet = subset(dataset, spit == FALSE)
# Escalar el dataset
trainingSet[, 1:2] = scale(trainingSet[, 1:2])
testingSet[, 1:2] = scale(testingSet[, 1:2])
?randomForest
?randomForest
library(randomForest)
?randomForest
classifier = randomForest(x = trainingSet[, -3], y = trainingSet$Purchased, ntree = 10)
yPred = predict(classifier, type = "response", newdata = testingSet[, -3])
cm = table(testingSet[, 3], yPred)
cm
View(classifier)
classifier[["predicted"]][["79"]]
# Visuliazacion del conjunto de entranmiento
library(ElemStatLearn)
set = trainingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet)
plot(set[, -3],
main = 'Random Forest (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
classifier = randomForest(x = trainingSet[, -3], y = trainingSet$Purchased, ntree = 100)
yPred = predict(classifier, type = "response", newdata = testingSet[, -3])
cm = table(testingSet[, 3], yPred)
cm
classifier = randomForest(x = trainingSet[, -3], y = trainingSet$Purchased, ntree = 10)
yPred = predict(classifier, type = "response", newdata = testingSet[, -3])
cm = table(testingSet[, 3], yPred)
set = trainingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet)
plot(set[, -3],
main = 'Random Forest (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = testingSet
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
gridSet = expand.grid(x1, x2)
colnames(gridSet) = c('Age', 'EstimatedSalary')
yGrid = predict(classifier, newdata = gridSet)
plot(set[, -3],
main = 'Random Forest (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(yGrid), length(x1), length(x2)), add = TRUE)
points(gridSet, pch = '.', col = ifelse(yGrid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
